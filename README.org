#+TITLE: Syntree Generator
#+AUTHOR: Jason Walsh
#+EMAIL: j@wal.sh
#+DATE: March 4, 2025

* Syntree Generator

A tool for converting text (particularly French literary text) into S-expression syntax trees for linguistic analysis.

** Overview

This project converts natural language text into structured Abstract Syntax Trees (ASTs) represented in S-expression format. It is particularly designed for analyzing French literary texts, such as Proust's works.

The generated S-expressions follow a constituent-based structure with labels such as:
- ROOT - Root node of the sentence
- S - Sentence or clause
- PP - Prepositional phrase
- NP - Noun phrase
- VP - Verb phrase
- And many more linguistic constituents

** Installation

The project uses Poetry for dependency management.

#+BEGIN_SRC bash
# Clone the repository
git clone https://github.com/jwalsh/syntree-generator.git
cd syntree-generator

# Install dependencies
make setup
#+END_SRC

** Usage

*** Basic usage

To parse a text file and generate S-expressions:

#+BEGIN_SRC bash
# Using the shell script
./_.sh path/to/input.txt path/to/output.sexp

# Or using make
make run INPUT_FILE=data/pg15288.txt OUTPUT_FILE=output/proust.sexp
#+END_SRC

*** Getting samples

To generate a sample of S-expressions that can be easily loaded into the S-expression Grammar Analyzer:

#+BEGIN_SRC bash
make samples SAMPLE_SIZE=5
#+END_SRC

This will create a file with the extension ~.sample.sexp~ containing 5 sample S-expressions.

*** Visualization

To view the syntax trees in the web UI:

#+BEGIN_SRC bash
make serve
# Then visit http://localhost:8000 in your browser
#+END_SRC

*** Options

The parser supports several options:

- Input file: The text file to analyze
- Output file: Where to write the S-expressions
- Chunk size: The size of text chunks to process (default: 5000 characters)
- Language: The language of the text (currently supports 'fr' for French and 'en' for English)
- Sample size: Number of S-expressions to extract for samples

** Structure

#+BEGIN_SRC
syntree-generator/
├── Makefile              # Build automation
├── README.org            # This file
├── data/                 # Input text files
│   └── pg15288.txt       # Proust's text
├── output/               # Generated S-expressions
├── public/               # Web UI
│   └── index.html        # S-expression visualizer
├── pyproject.toml        # Poetry configuration
├── syntree_generator/    # Source code
│   ├── __init__.py
│   ├── cli.py            # Command line interface
│   └── parser.py         # Core parsing logic
└── tests/                # Test suite
    └── test_parser.py
#+END_SRC

** Example Output

Here's an example of the S-expression output for a simple French sentence:

#+BEGIN_SRC lisp
(ROOT
  (S
    (NP
      (DET "Le")
      (N "chat"))
    (VP
      (V "dort")
      (PP
        (P "sur")
        (NP
          (DET "le")
          (N "canapé"))))))
#+END_SRC

** Development

*** Running Tests

#+BEGIN_SRC bash
make test
#+END_SRC

*** Code Formatting

#+BEGIN_SRC bash
make format
#+END_SRC

*** Adding Features

To add new features:

1. Implement the feature in the appropriate module
2. Add tests in the ~tests/~ directory
3. Update documentation in this README

** License

MIT License

Copyright (c) 2025 Jason Walsh

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
